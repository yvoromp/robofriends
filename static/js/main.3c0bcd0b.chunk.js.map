{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","Actions.js","Constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardsArray","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","ispending","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c0bcd0b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name , email, id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t<p> {email} </p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardsArray = robots.map((user, i) =>{\r\n\t\tif(false){\r\n\t\t\tthrow new Error('nooooo');\r\n\t\t}\r\n\t\treturn <Card key={i}\r\n\t\t \t\t\t id={robots[i].id} \r\n\t\t \t\t\t name={robots[i].name} \r\n\t\t \t\t\t email={robots[i].email} />\r\n\t});\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{cardsArray}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\taria-label='Search Robots'\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search'\r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1> Oops...</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport { setSearchField, requestRobots } from '../Actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tispending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\treturn isPending ?  \r\n\t\t<h1>Loading...</h1> :\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'> RoboFriends </h1>\r\n\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CardList robots= { filteredRobots } />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCES,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n } from './Constants.js';\r\n\r\nexport const setSearchField = (text) =>({\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n\t})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCES, payload: data}))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCES = 'REQUEST_ROBOTS_SUCCES';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCES,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n\t\t} from './Constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {ispending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCES:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer= combineReducers({ searchRobots, requestRobots });\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n\n\nReactDOM.render(<Provider store={ store }>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\n\t\t\t\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}